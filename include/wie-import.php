<?php
/**
 * File import.php
 */


/**
 * Upload import file
 *
 * @return void
 */
function Upload_Import_file()
{
    //contain all the uploaded file information
    $uploaded_file = $_FILES['import_filew'];
    $wp_filetype = wp_check_filetype_and_ext($uploaded_file['tmp_name'], $uploaded_file['name'], false);
    // Check file type.
    $str= $uploaded_file['type'];
    //Hear chacking .json file
    if ($str != 'application/json') {
        ?>
        <!-- Wordpress erroe notation use -->
        <div class="notice notice-error is-dismissible wie-show-notice" id="wie-myDIV">
            <p>You must upload a <b>.json</b> file generated by this plugin.</p>
        </div>
        <?php
    } else {
        $upload_file[ 'type']="text/plain";
        $uploaded_file['name']="Widget.txt";
        $file_data = wp_handle_upload($uploaded_file, array('test_form' => false,));
        //moving the file to the appropriate directory
        ?> 
        <!-- Import successfully ues a wordpress success notation -->
        <div class="notice notice-success is-dismissible wie-show-notice"  id="wie-myDIV">
            <p>Widget Imported Successfully.</p>
        </div>
        <?php
        //callback function
        Process_Import_file($file_data['file']);//send a file path
    }
}

/**
 * File
 *
 * @param Strign $file variable send a temporary file path.
 *
 * @return Process_Import_file
 */
function Process_Import_file($file)
{
    //Split the file content(array content) to store data in $data variable
    $data = implode('', file($file));
    $data = json_decode($data);
    // Delete import file.wp_content/upload folder
    unlink($file);
    //callback function
    Import_data($data);
}

/**
 * Data
 *
 * @param Array $data decoded data.
 *
 * @return Import_data
 */
function Import_data($data)
{
    //To get the data registor sidebar
    global $wp_registered_sidebars;
    // Get all available widgets
    $available_widgets = Available_widget();
    // To declear array get all existing widget instances.
    $widget_instances = array();
    foreach ($available_widgets as $widget_data) {
        //$widget_instance to fetch the data from wp_options table
        $widget_instances[$widget_data['id_base']] = get_option('widget_' . $widget_data['id_base']);
    }
    // Begin results.
    $results = array();
    // Loop import data's sidebars.
    foreach ($data as $sidebar_id => $widgets) {
        // Skip inactive widgets (should not be in export file).
        if ('wp_inactive_widgets' === $sidebar_id) {
            continue;
        }
        // Check if sidebar is available on this site.
        // Otherwise add widgets to inactive section
        if (isset($wp_registered_sidebars[ $sidebar_id ])) {
            $sidebar_available    = true;
            $use_sidebar_id       = $sidebar_id;
        } else {
            $sidebar_available    = false;
            $use_sidebar_id       = 'wp_inactive_widgets'; // Add to inactive if sidebar does not exist in theme.
        }
        // Result for sidebar
        // Sidebar name if theme supports it otherwise ID.
        //Sidebar_Id it is print the name of Sidebar
        $results[ $sidebar_id ]['name']         = ! empty($wp_registered_sidebars[ $sidebar_id ]['name']) ?
        $wp_registered_sidebars[ $sidebar_id ]['name'] : $sidebar_id;
        $results[ $sidebar_id ]['widgets']      = array();
        
        if (isset($wp_registered_sidebars [$sidebar_id]['name'])) {
            echo '<div class="wie-sidebar">'.$wp_registered_sidebars[$sidebar_id]['name'].'</div><br>';
        } else {
            ?>
            <div class="wie-sidebar">Inactive Widgets</div>
            <?php
        }
        //In instance id to store widget name like calender-1
        //In widgets to store all widget information;
        foreach ($widgets as $widget_instance_id => $widget) {
            $fail = false;
            //To remove the no and fetch the widget name
            $id_base= preg_replace('/-[0-9]+$/', '', $widget_instance_id);
            //To store the widget id like 2,3
            $instance_id_number = str_replace($id_base . '-', '', $widget_instance_id);
            if (! $fail && ! isset($available_widgets[ $id_base ])) {
                $fail                = true;
                $widget_message_type = 'error';
            }
            $widget = apply_filters('widget_settings', $widget);
            $widget = json_decode(wp_json_encode($widget), true);
            $widget = apply_filters('widget_settings_array', $widget);
            if (! $fail && isset($widget_instances[ $id_base ])) {
                // Get existing widgets in this sidebar.
                $sidebars_widgets = get_option('sidebars_widgets');
                $sidebar_widgets = isset($sidebars_widgets[ $use_sidebar_id ]) ? $sidebars_widgets[ $use_sidebar_id ] : array();
                // Check Inactive if that's where will go.
                // Loop widgets with ID base.
                 $single_widget_instances = ! empty($widget_instances[ $id_base ]) ? $widget_instances[ $id_base ] : array();
                foreach ($single_widget_instances as $check_id => $check_widget) {
                    // Is widget in same sidebar and has identical settings?
                    if (in_array("$id_base-$check_id", $sidebar_widgets, true) && (array) $widget === $check_widget) {
                        ?>
                        <div class="wie-Imported_widgets">
                         <?php
                            echo $id_base.' ';
                            ?>
                            <div class="wie-widget_available_txt_color">
                              <?php
                                echo"   Widget already exists "."<br>";
                                ?>
                            </div>
                        </div>
                           <?php
                            $fail = true;
                            $widget_message_type = 'warning';
                            break;
                    }
                }
            }
            // No failure.
            if (! $fail) {
                // Add widget instance
                $single_widget_instances = get_option('widget_' . $id_base); // All instances for that widget ID base, get fresh every time.
                $single_widget_instances = ! empty($single_widget_instances) ? $single_widget_instances : array(
                 '_multiwidget' => 1, // Start fresh if have to.
                );
                $single_widget_instances[] = $widget;
                // Get the key it was given.
                //Used to find the last element of the given array. The end() function
                end($single_widget_instances);
                $new_instance_id_number = key($single_widget_instances);
                if ('0' === strval($new_instance_id_number)) {
                    $new_instance_id_number = 1;
                    $single_widget_instances[ $new_instance_id_number ] = $single_widget_instances[0];
                    unset($single_widget_instances[0]);
                }
                // Move _multiwidget to end of array for uniformity.
                if (isset($single_widget_instances['_multiwidget'])) {
                    $multiwidget = $single_widget_instances['_multiwidget'];
                    unset($single_widget_instances['_multiwidget']);
                    $single_widget_instances['_multiwidget'] = $multiwidget;
                }
                // Update option with new widget.
                update_option('widget_' . $id_base, $single_widget_instances);
                // Assign widget instance to sidebar.
                // Which sidebars have which widgets, get fresh every time.
                $sidebars_widgets = get_option('sidebars_widgets');
                if (! $sidebars_widgets) {
                    $sidebars_widgets = array();
                }
                // Use ID number from new widget instance.
                $new_instance_id = $id_base . '-' . $new_instance_id_number;
                // Add new instance to sidebar.
                $sidebars_widgets[ $use_sidebar_id ][] = $new_instance_id;
                // Save the amended data.
                update_option('sidebars_widgets', $sidebars_widgets);
                // After widget import action.
                $after_widget_import = array(
                    'sidebar'           => $use_sidebar_id,
                    'sidebar_old'       => $sidebar_id,
                    'widget'            => $widget,
                    'widget_type'       => $id_base,
                    'widget_id'         => $new_instance_id,
                    'widget_id_old'     => $widget_instance_id,
                    'widget_id_num'     => $new_instance_id_number,
                    'widget_id_num_old' => $instance_id_number,
                );
                do_action('after_widget_import', $after_widget_import);
                ?>
                <div class="wie-Imported_widgets ">
                <?php
                  $s1=explode('-', $new_instance_id);
                  echo $s1[0];
                ?>
                    <div class="wie-imported_txt_color">
                  <?php
                    echo' Widget Imported'.'<br>';
                    ?>
                    </div>
                </div>
                <?php
                if ($sidebar_available) {
                    $widget_message_type = 'success';
                } else {
                    $widget_message_type = 'warning';
                }
            }
        }
    }
    // Return results.
    return apply_filters('import_results', $results);
}